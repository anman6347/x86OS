     1                                      BOOT_LOAD   equ     0x7c00
     2                                      ORG     BOOT_LOAD
     3                                  
     4                                      ; --- macro ---
     5                                      %include    "../include/macro.s"
     1                              <1> ; --- cdecl ---
     2                              <1> 
     3                              <1> %macro cdecl 1-*.nolist
     4                              <1>     %rep    %0 - 1
     5                              <1>         push    %{-1:-1}
     6                              <1>         %rotate -1
     7                              <1>     %endrep
     8                              <1>     %rotate -1
     9                              <1> 
    10                              <1>     call    %1
    11                              <1> 
    12                              <1>     %if 1 < %0          ; delete args
    13                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)      ; if realmode then __BITS__ = 16
    14                              <1>     %endif
    15                              <1> %endmacro
     6                                  
     7                                  
     8                                      ; --- entry point ---
     9                                  entry: 
    10 00000000 EB58                        jmp     ipl
    11                                  
    12                                  
    13                                      ; --- BIOS Parameter Block ---
    14 00000002 90<rept>                    times   90 - ($ - $$) db 0x90
    15                                  
    16                                  
    17                                      ; --- Initial Program Loader ---
    18                                  ipl:
    19                                  
    20 0000005A FA                          cli
    21                                  
    22 0000005B B80000                      mov     ax, 0x00
    23 0000005E 8ED8                        mov     ds, ax
    24 00000060 8EC0                        mov     es, ax
    25 00000062 8ED0                        mov     ss, ax                  ; ds = es = ss = 0
    26 00000064 BC007C                      mov     sp, BOOT_LOAD           ; sp = 0x7c00
    27                                  
    28 00000067 FB                          sti
    29                                  
    30 00000068 8816[AA00]                  mov     [BOOT.DRIVE],    dl     ; save drive number
    31                                  
    32 0000006C 68[9100]E84F0083C4-         cdecl   puts, .s0               ; write text in teletype mode
    32 00000074 02                 
    33                                  
    34 00000075 6A046A106A0968-             cdecl   itoa, -1, .s1, 9, 16, 0b0100
    34 0000007C [9E00]6AFFE85D0083-
    34 00000084 C40A               
    35 00000086 68[9E00]E8350083C4-         cdecl   puts, .s1
    35 0000008E 02                 
    36                                  
    37                                  
    38 0000008F EBFE                        jmp     $                       ; while(1);
    39                                  
    40 00000091 426F6F74696E672E2E-     .s0:    db  "Booting...", 0x0A, 0x0D, 0x00
    40 0000009A 2E0A0D00           
    41                                  
    42 0000009E 2D2D2D2D2D2D2D2D2D-     .s1:    db  "---------", 0x0A, 0x0D, 0x00
    42 000000A7 0A0D00             
    43                                  
    44                                      ALIGN 2, db 0
    45                                  BOOT:
    46 000000AA 0000                    .DRIVE:     dw  0                   ; Drive number
    47                                  
    48                                      ; --- modules ---
    49                                      %include    "../modules/real/putc.s"
     1                              <1> ; void putc(int16 chcode)
     2                              <1> 
     3                              <1> putc:
     4                              <1> 
     5                              <1>     ; build stack frame
     6 000000AC 55                  <1>     push    bp
     7 000000AD 89E5                <1>     mov     bp, sp
     8                              <1> 
     9                              <1>     ; save registers
    10 000000AF 50                  <1>     push    ax
    11 000000B0 53                  <1>     push    bx
    12                              <1> 
    13                              <1> 
    14                              <1>     ; write text in teletype mode
    15 000000B1 8A4604              <1>     mov     al, [bp + 4]
    16 000000B4 B40E                <1>     mov     ah, 0x0E
    17 000000B6 BB0000              <1>     mov     bx, 0x00
    18 000000B9 CD10                <1>     int     0x10
    19                              <1> 
    20                              <1> 
    21                              <1>     ; return registers
    22 000000BB 5B                  <1>     pop     bx
    23 000000BC 58                  <1>     pop     ax
    24                              <1> 
    25                              <1>     ; destroy stack frame
    26 000000BD 89EC                <1>     mov     sp, bp
    27 000000BF 5D                  <1>     pop     bp
    28                              <1> 
    29 000000C0 C3                  <1>     ret
    50                                      %include    "../modules/real/puts.s"
     1                              <1> ; void puts(int16 straddr)
     2                              <1> ; write str from head to '\0'
     3                              <1> 
     4                              <1> 
     5                              <1> puts:
     6                              <1> 
     7                              <1>     ; build stack frame
     8 000000C1 55                  <1>     push    bp
     9 000000C2 89E5                <1>     mov     bp, sp
    10                              <1> 
    11                              <1>     ; save registers
    12 000000C4 50                  <1>     push    ax
    13 000000C5 53                  <1>     push    bx
    14 000000C6 56                  <1>     push    si
    15                              <1> 
    16                              <1>     ; get arg
    17 000000C7 8B7604              <1>     mov     si, [bp + 4]    ; si = straddr
    18                              <1> 
    19                              <1>     ; write text in teletype mode
    20 000000CA B40E                <1>     mov     ah, 0x0E
    21 000000CC BB0000              <1>     mov     bx, 0x00
    22 000000CF FC                  <1>     cld                     ; DF = 0    
    23                              <1> .10L:
    24 000000D0 AC                  <1>     lodsb
    25 000000D1 3C00                <1>     cmp     al, 0           ; if (*(si++) == 0)
    26 000000D3 7404                <1>     je      .10E            ; break;
    27 000000D5 CD10                <1>     int     0x10
    28 000000D7 EBF7                <1>     jmp     .10L
    29                              <1> .10E:
    30                              <1> 
    31                              <1>     ; return registers
    32 000000D9 5E                  <1>     pop     si
    33 000000DA 5B                  <1>     pop     bx
    34 000000DB 58                  <1>     pop     ax
    35                              <1> 
    36                              <1>     ; destroy stack frame
    37 000000DC 89EC                <1>     mov     sp, bp
    38 000000DE 5D                  <1>     pop     bp
    39                              <1> 
    40 000000DF C3                  <1>     ret
    51                                      %include    "../modules/real/itoa.s"
     1                              <1> ; void itos(int num, char* buf, int size, int radix, int flags);
     2                              <1> ; flags = 1 : num is used as signed
     3                              <1> ; flags = 2 : display plus/minus sign
     4                              <1> ; flags = 4 : fill in the space with 0
     5                              <1> 
     6                              <1> 
     7                              <1> itoa:
     8                              <1>     ; build stack frame
     9 000000E0 55                  <1>     push    bp
    10 000000E1 89E5                <1>     mov     bp, sp
    11                              <1> 
    12                              <1>     ; save registers' data
    13 000000E3 50                  <1>     push    ax
    14 000000E4 53                  <1>     push    bx
    15 000000E5 51                  <1>     push    cx
    16 000000E6 52                  <1>     push    dx
    17 000000E7 56                  <1>     push    si
    18 000000E8 57                  <1>     push    di
    19                              <1> 
    20                              <1>     ; get args
    21 000000E9 8B4604              <1>     mov     ax, [bp + 4]    ; ax = num;
    22 000000EC 8B7606              <1>     mov     si, [bp + 6]    ; si = buf;
    23 000000EF 8B4E08              <1>     mov     cx, [bp + 8]    ; cx = size;
    24                              <1> 
    25 000000F2 89F7                <1>     mov     di, si
    26 000000F4 01CF                <1>     add     di, cx
    27 000000F6 4F                  <1>     dec     di              ; di = &(buf[size - 1]);
    28                              <1> 
    29 000000F7 8B5E0C              <1>     mov     bx, [bp + 12]   ; bx = flags;
    30                              <1> 
    31                              <1>     ; positive/negative judgement
    32 000000FA F7C30100            <1>     test    bx, 0b0001      ; if (flags & 0x01)
    33 000000FE 7408                <1>     je      .10E
    34 00000100 83F800              <1>     cmp     ax, 0           ;   if (num < 0)
    35 00000103 7D03                <1>     jge     .12E
    36 00000105 83CB02              <1>     or      bx, 0b0010      ;       flags |= 2;
    37                              <1> .10E:
    38                              <1> .12E:
    39                              <1> 
    40                              <1>     ; which sould be displayed pos/neg ?
    41 00000108 F7C30200            <1>     test    bx, 0b0010
    42 0000010C 7410                <1>     je      .20E
    43 0000010E 83F800              <1>     cmp     ax, 0
    44 00000111 7D07                <1>     jge     .22F
    45 00000113 F7D8                <1>     neg     ax              ; num *= -1;
    46 00000115 C6042D              <1>     mov     [si], byte '-'  ; buf[0] = '-';
    47 00000118 EB03                <1>     jmp     .22E
    48                              <1> .22F:
    49 0000011A C6042B              <1>     mov     [si], byte '+'
    50                              <1> .22E:
    51 0000011D 49                  <1>     dec     cx
    52                              <1> .20E:
    53                              <1> 
    54                              <1> 
    55                              <1>     ; convert num to ASCII
    56 0000011E 8B5E0A              <1>     mov     bx, [bp + 10]           ; bx = radix
    57                              <1> .30L:
    58 00000121 BA0000              <1>     mov     dx, 0
    59 00000124 F7F3                <1>     div     bx                      ; ax = dx:ax % bx,;     dx = dx:ax % bx;
    60                              <1> 
    61 00000126 89D6                <1>     mov     si, dx
    62 00000128 8A94[5101]          <1>     mov     dl, byte [.ascii + si]  ; dl = ascii[si];
    63                              <1> 
    64 0000012C 8815                <1>     mov     [di], dl                ; buf[size - i]
    65 0000012E 4F                  <1>     dec     di
    66                              <1> 
    67 0000012F 83F800              <1>     cmp     ax, 0
    68 00000132 E0ED                <1>     loopnz  .30L
    69                              <1> 
    70                              <1> 
    71                              <1>     ; fill in the space
    72 00000134 83F900              <1>     cmp     cx, 0
    73 00000137 740E                <1>     je      .40E
    74 00000139 B020                <1>     mov     al, ' '
    75 0000013B F7460C0400          <1>     test    [bp + 12], word 0b0100  ; if (flags & 0x04)
    76 00000140 7402                <1>     je     .42E
    77 00000142 B030                <1>     mov     al, '0'
    78                              <1> .42E:
    79 00000144 FD                  <1>     std                             ; DF = 1 (- direction)
    80 00000145 F3AA                <1>     rep stosb                       ; while(--cx) [di--] = al;
    81                              <1> .40E:
    82                              <1> 
    83                              <1> 
    84                              <1>     ; return registers' data
    85 00000147 5F                  <1>     pop     di
    86 00000148 5E                  <1>     pop     si
    87 00000149 5A                  <1>     pop     dx
    88 0000014A 59                  <1>     pop     cx
    89 0000014B 5B                  <1>     pop     bx
    90 0000014C 58                  <1>     pop     ax
    91                              <1> 
    92                              <1>     ; destroy stack frame
    93 0000014D 89EC                <1>     mov     sp, bp
    94 0000014F 5D                  <1>     pop     bp
    95                              <1> 
    96 00000150 C3                  <1>     ret
    97                              <1> 
    98                              <1> 
    99 00000151 303132333435363738- <1> .ascii: db  "0123456789ABCDEF"      ; ascii-short table
    99 0000015A 39414243444546      <1>
   100                              <1> 
    52                                  
    53                                      ; --- boot flag ---
    54 00000161 00<rept>                    times   510 - ($ - $$) db 0x00
    55 000001FE 55AA                        db      0x55, 0xAA              ; boot flag
