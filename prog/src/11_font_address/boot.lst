     1                                      ; --- macro ---
     2                                      %include    "../include/define.s"
     1                              <1> ; defines of important constants
     2                              <1> 
     3                              <1> BOOT_LOAD   equ     0x7c00                  ; addr where boot program loaded
     4                              <1> 
     5                              <1> BOOT_SIZE   equ     (1024 * 8)              ; size of boot code
     6                              <1> SECT_SIZE   equ     (512)                   ; size of a sector
     7                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ; numbaer of sectors used in boot program
     3                                      %include    "../include/macro.s"
     1                              <1> ; --- cdecl ---
     2                              <1> 
     3                              <1> %macro cdecl 1-*.nolist
     4                              <1>     %rep    %0 - 1
     5                              <1>         push    %{-1:-1}
     6                              <1>         %rotate -1
     7                              <1>     %endrep
     8                              <1>     %rotate -1
     9                              <1> 
    10                              <1>     call    %1
    11                              <1> 
    12                              <1>     %if 1 < %0          ; delete args
    13                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)      ; if realmode then __BITS__ = 16
    14                              <1>     %endif
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ; --- drive struct ---
    19                              <1> struc drive
    20 00000000 <res 00000002>      <1>     .no     resw    1       ; drive number
    21 00000002 <res 00000002>      <1>     .cyln   resw    1       ; cylinder
    22 00000004 <res 00000002>      <1>     .head   resw    1       ; head
    23 00000006 <res 00000002>      <1>     .sect   resw    1       ; sector
    24                              <1> endstruc
     4                                  
     5                                      ORG     BOOT_LOAD
     6                                  
     7                                      ; --- entry point ---
     8                                  entry: 
     9 00000000 EB58                        jmp     ipl
    10                                  
    11                                  
    12                                      ; --- BIOS Parameter Block ---
    13 00000002 90<rept>                    times   90 - ($ - $$) db 0x90
    14                                  
    15                                  
    16                                      ; --- Initial Program Loader ---
    17                                  ipl:
    18                                  
    19 0000005A FA                          cli
    20                                  
    21 0000005B B80000                      mov     ax, 0x00
    22 0000005E 8ED8                        mov     ds, ax
    23 00000060 8EC0                        mov     es, ax
    24 00000062 8ED0                        mov     ss, ax                      ; ds = es = ss = 0
    25 00000064 BC007C                      mov     sp, BOOT_LOAD               ; sp = 0x7c00
    26                                  
    27 00000067 FB                          sti
    28                                  
    29 00000068 8816[B800]                  mov     [BOOT + drive.no],    dl    ; save drive number
    30                                  
    31 0000006C 68[9900]E84E0083C4-         cdecl   puts, .s0                   ; write text in teletype mode
    31 00000074 02                 
    32                                  
    33                                  
    34                                      ; read all the sectors left
    35 00000075 BB0F00                      mov     bx, BOOT_SECT - 1               ; bx = number of sectors left
    36 00000078 B9007E                      mov     cx, BOOT_LOAD + SECT_SIZE       ; cx = addr where next sectors will be loaded
    37 0000007B 515368[B800]E89B00-         cdecl   read_chs, BOOT, bx, cx          ; ax = read_chs(BOOT, bx, cx);
    37 00000083 83C406             
    38                                  
    39 00000086 39D8                        cmp     ax, bx
    40 00000088 740C                        jz      .10E                    ; if success, jump to .10E
    41                                  
    42 0000008A 68[A600]E8300083C4-         cdecl   puts, .e0
    42 00000092 02                 
    43 00000093 E84900                      call    reboot
    44                                  .10E:
    45                                  
    46                                      ; transition to the 2nd stage
    47 00000096 E96102                      jmp     stage_2
    48                                  
    49                                  
    50                                  
    51 00000099 426F6F74696E672E2E-     .s0:    db  "Booting...", 0x0A, 0x0D, 0x00
    51 000000A2 2E0A0D00           
    52 000000A6 4572726F723A736563-     .e0:    db  "Error:sector read", 0x00
    52 000000AF 746F72207265616400 
    53                                  
    54                                      ALIGN 2, db 0
    55                                  BOOT:
    56                                      istruc  drive
    57 000000B8 0000                            at  drive.no,   dw  0   ; drive number
    58 000000BA 0000                            at  drive.cyln, dw  0   ; cylinder
    59 000000BC 0000                            at  drive.head, dw  0   ; head
    60 000000BE 0200                            at  drive.sect, dw  2   ; sector
    61                                      iend
    62                                  
    63                                      ; --- modules ---
    64                                      %include    "../modules/real/puts.s"
     1                              <1> ; void puts(int16 straddr)
     2                              <1> ; write str from head to '\0'
     3                              <1> 
     4                              <1> 
     5                              <1> puts:
     6                              <1> 
     7                              <1>     ; build stack frame
     8 000000C0 55                  <1>     push    bp
     9 000000C1 89E5                <1>     mov     bp, sp
    10                              <1> 
    11                              <1>     ; save registers
    12 000000C3 50                  <1>     push    ax
    13 000000C4 53                  <1>     push    bx
    14 000000C5 56                  <1>     push    si
    15                              <1> 
    16                              <1>     ; get arg
    17 000000C6 8B7604              <1>     mov     si, [bp + 4]    ; si = straddr
    18                              <1> 
    19                              <1>     ; write text in teletype mode
    20 000000C9 B40E                <1>     mov     ah, 0x0E
    21 000000CB BB0000              <1>     mov     bx, 0x00
    22 000000CE FC                  <1>     cld                     ; DF = 0    
    23                              <1> .10L:
    24 000000CF AC                  <1>     lodsb
    25 000000D0 3C00                <1>     cmp     al, 0           ; if (*(si++) == 0)
    26 000000D2 7404                <1>     je      .10E            ; break;
    27 000000D4 CD10                <1>     int     0x10
    28 000000D6 EBF7                <1>     jmp     .10L
    29                              <1> .10E:
    30                              <1> 
    31                              <1>     ; return registers
    32 000000D8 5E                  <1>     pop     si
    33 000000D9 5B                  <1>     pop     bx
    34 000000DA 58                  <1>     pop     ax
    35                              <1> 
    36                              <1>     ; destroy stack frame
    37 000000DB 89EC                <1>     mov     sp, bp
    38 000000DD 5D                  <1>     pop     bp
    39                              <1> 
    40 000000DE C3                  <1>     ret
    65                                      %include    "../modules/real/reboot.s"
     1                              <1> ; reboot
     2                              <1> 
     3                              <1> 
     4                              <1> reboot:
     5                              <1>     ; display a message
     6 000000DF 68[FB00]E8DBFF83C4- <1>     cdecl   puts, .s0
     6 000000E7 02                  <1>
     7                              <1> 
     8                              <1>     ; wait for key-input
     9                              <1> .10L:
    10 000000E8 B410                <1>     mov     ah, 0x10
    11 000000EA CD16                <1>     int     0x16            ; get key-input
    12                              <1> 
    13 000000EC 3C20                <1>     cmp     al, ' '
    14 000000EE 75F8                <1>     jne     .10L
    15                              <1> 
    16                              <1>     ; output newline
    17 000000F0 68[1901]E8CAFF83C4- <1>     cdecl   puts, .s1
    17 000000F8 02                  <1>
    18                              <1> 
    19                              <1>     ; reboot
    20 000000F9 CD19                <1>     int     0x19
    21                              <1> 
    22                              <1> 
    23 000000FB 0A0D50757368205350- <1> .s0:    db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    23 00000104 414345206B65792074- <1>
    23 0000010D 6F207265626F6F742E- <1>
    23 00000116 2E2E00              <1>
    24 00000119 0A0D0A0D00          <1> .s1:    db  0x0A, 0x0D, 0x0A, 0x0D, 0
    66                                      %include    "../modules/real/read_chs.s"
     1                              <1> ; int read_chs(int drive, int sect, int dst)
     2                              <1> ; return number of sectors read
     3                              <1> ; drive: addr to drive struct
     4                              <1> ; sect: number of read sectors
     5                              <1> ; dst: dst addr
     6                              <1> 
     7                              <1> ; can't call this func before DS = 0, maybe
     8                              <1> 
     9                              <1> 
    10                              <1> read_chs:
    11                              <1> 
    12                              <1>     ; build stack frame
    13 0000011E 55                  <1>     push    bp
    14 0000011F 89E5                <1>     mov     bp, sp
    15 00000121 6A03                <1>     push    3           ; number of retries
    16 00000123 6A00                <1>     push    0           ; number of sectors read
    17                              <1> 
    18                              <1>     ; save registers
    19 00000125 53                  <1>     push    bx
    20 00000126 51                  <1>     push    cx
    21 00000127 52                  <1>     push    dx
    22 00000128 06                  <1>     push    es
    23 00000129 56                  <1>     push    si
    24                              <1> 
    25                              <1>     ; set cx, dx, es, bx for reading sectors (CHS)
    26 0000012A 8B7604              <1>     mov     si, [bp + 4]                ; si = addr to drive struct
    27 0000012D 8A6C02              <1>     mov     ch, [si + drive.cyln] 
    28 00000130 8A4C03              <1>     mov     cl, [si + drive.cyln + 1]
    29 00000133 C0E106              <1>     shl     cl, 6
    30 00000136 0A4C06              <1>     or      cl, [si + drive.sect]
    31                              <1> 
    32 00000139 8A7404              <1>     mov     dh, [si + drive.head]
    33 0000013C 8A14                <1>     mov     dl, [si + 0]
    34                              <1> 
    35 0000013E B80000              <1>     mov     ax, 0
    36 00000141 8EC0                <1>     mov     es, ax
    37 00000143 8B5E08              <1>     mov     bx, [bp + 8]
    38                              <1> 
    39                              <1> .10L:
    40                              <1>     ; read sectors
    41 00000146 B402                <1>     mov     ah, 0x02
    42 00000148 8A4606              <1>     mov     al, [bp + 6]
    43                              <1> 
    44 0000014B CD13                <1>     int     0x13
    45 0000014D 7304                <1>     jnc      .11E        ; if error occured, jump to .11E
    46 0000014F B000                <1>     mov     al, 0
    47 00000151 EB0C                <1>     jmp     .10E
    48                              <1> 
    49                              <1> .11E:
    50 00000153 3C00                <1>     cmp     al, 0
    51 00000155 7508                <1>     jne     .10E        ; if at least one sector was read
    52                              <1> 
    53 00000157 B80000              <1>     mov     ax, 0
    54 0000015A FF4EFE              <1>     dec     word    [bp - 2]    ; retry--
    55 0000015D 75E7                <1>     jnz     .10L                ; read sectors again
    56                              <1> 
    57                              <1> .10E:
    58                              <1>     ; remove status info
    59 0000015F B400                <1>     mov     ah, 0
    60                              <1> 
    61                              <1>     ; return registers
    62 00000161 5E                  <1>     pop     si
    63 00000162 07                  <1>     pop     es
    64 00000163 5A                  <1>     pop     dx
    65 00000164 59                  <1>     pop     cx
    66 00000165 5B                  <1>     pop     bx
    67                              <1> 
    68                              <1>     ; destroy stack frame
    69 00000166 89EC                <1>     mov     sp, bp
    70 00000168 5D                  <1>     pop     bp
    71                              <1> 
    72 00000169 C3                  <1>     ret
    67                                  
    68                                  
    69                                      ; --- boot flag ---
    70 0000016A 00<rept>                    times   510 - ($ - $$) db 0x00
    71 000001FE 55AA                        db      0x55, 0xAA              ; boot flag
    72                                  
    73                                  
    74                                      ; ----------------------------
    75                                      ; informations obtained in real mode
    76                                      ; ----------------------------
    77                                  
    78                                      ; BIOS font data addr
    79                                  FONT:
    80 00000200 0000                    .seg    dw  0
    81 00000202 0000                    .off    dw  0
    82                                  
    83                                      ; ----------------------------
    84                                      ; --- 2nd stage of booting ---
    85                                      ; ----------------------------
    86                                  
    87                                      ; --- modules ---
    88                                      %include    "../modules/real/putc.s"
     1                              <1> ; void putc(int16 chcode)
     2                              <1> 
     3                              <1> putc:
     4                              <1> 
     5                              <1>     ; build stack frame
     6 00000204 55                  <1>     push    bp
     7 00000205 89E5                <1>     mov     bp, sp
     8                              <1> 
     9                              <1>     ; save registers
    10 00000207 50                  <1>     push    ax
    11 00000208 53                  <1>     push    bx
    12                              <1> 
    13                              <1> 
    14                              <1>     ; write text in teletype mode
    15 00000209 8A4604              <1>     mov     al, [bp + 4]
    16 0000020C B40E                <1>     mov     ah, 0x0E
    17 0000020E BB0000              <1>     mov     bx, 0x00
    18 00000211 CD10                <1>     int     0x10
    19                              <1> 
    20                              <1> 
    21                              <1>     ; return registers
    22 00000213 5B                  <1>     pop     bx
    23 00000214 58                  <1>     pop     ax
    24                              <1> 
    25                              <1>     ; destroy stack frame
    26 00000215 89EC                <1>     mov     sp, bp
    27 00000217 5D                  <1>     pop     bp
    28                              <1> 
    29 00000218 C3                  <1>     ret
    89                                      %include    "../modules/real/itoa.s"
     1                              <1> ; void itos(int num, char* buf, int size, int radix, int flags);
     2                              <1> ; flags = 1 : num is used as signed
     3                              <1> ; flags = 2 : display plus/minus sign
     4                              <1> ; flags = 4 : fill in the space with 0
     5                              <1> 
     6                              <1> 
     7                              <1> itoa:
     8                              <1>     ; build stack frame
     9 00000219 55                  <1>     push    bp
    10 0000021A 89E5                <1>     mov     bp, sp
    11                              <1> 
    12                              <1>     ; save registers' data
    13 0000021C 50                  <1>     push    ax
    14 0000021D 53                  <1>     push    bx
    15 0000021E 51                  <1>     push    cx
    16 0000021F 52                  <1>     push    dx
    17 00000220 56                  <1>     push    si
    18 00000221 57                  <1>     push    di
    19                              <1> 
    20                              <1>     ; get args
    21 00000222 8B4604              <1>     mov     ax, [bp + 4]    ; ax = num;
    22 00000225 8B7606              <1>     mov     si, [bp + 6]    ; si = buf;
    23 00000228 8B4E08              <1>     mov     cx, [bp + 8]    ; cx = size;
    24                              <1> 
    25 0000022B 89F7                <1>     mov     di, si
    26 0000022D 01CF                <1>     add     di, cx
    27 0000022F 4F                  <1>     dec     di              ; di = &(buf[size - 1]);
    28                              <1> 
    29 00000230 8B5E0C              <1>     mov     bx, [bp + 12]   ; bx = flags;
    30                              <1> 
    31                              <1>     ; positive/negative judgement
    32 00000233 F7C30100            <1>     test    bx, 0b0001      ; if (flags & 0x01)
    33 00000237 7408                <1>     je      .10E
    34 00000239 83F800              <1>     cmp     ax, 0           ;   if (num < 0)
    35 0000023C 7D03                <1>     jge     .12E
    36 0000023E 83CB02              <1>     or      bx, 0b0010      ;       flags |= 2;
    37                              <1> .10E:
    38                              <1> .12E:
    39                              <1> 
    40                              <1>     ; which sould be displayed pos/neg ?
    41 00000241 F7C30200            <1>     test    bx, 0b0010
    42 00000245 7410                <1>     je      .20E
    43 00000247 83F800              <1>     cmp     ax, 0
    44 0000024A 7D07                <1>     jge     .22F
    45 0000024C F7D8                <1>     neg     ax              ; num *= -1;
    46 0000024E C6042D              <1>     mov     [si], byte '-'  ; buf[0] = '-';
    47 00000251 EB03                <1>     jmp     .22E
    48                              <1> .22F:
    49 00000253 C6042B              <1>     mov     [si], byte '+'
    50                              <1> .22E:
    51 00000256 49                  <1>     dec     cx
    52                              <1> .20E:
    53                              <1> 
    54                              <1> 
    55                              <1>     ; convert num to ASCII
    56 00000257 8B5E0A              <1>     mov     bx, [bp + 10]           ; bx = radix
    57                              <1> .30L:
    58 0000025A BA0000              <1>     mov     dx, 0
    59 0000025D F7F3                <1>     div     bx                      ; ax = dx:ax % bx,;     dx = dx:ax % bx;
    60                              <1> 
    61 0000025F 89D6                <1>     mov     si, dx
    62 00000261 8A94[8A02]          <1>     mov     dl, byte [.ascii + si]  ; dl = ascii[si];
    63                              <1> 
    64 00000265 8815                <1>     mov     [di], dl                ; buf[size - i]
    65 00000267 4F                  <1>     dec     di
    66                              <1> 
    67 00000268 83F800              <1>     cmp     ax, 0
    68 0000026B E0ED                <1>     loopnz  .30L
    69                              <1> 
    70                              <1> 
    71                              <1>     ; fill in the space
    72 0000026D 83F900              <1>     cmp     cx, 0
    73 00000270 740E                <1>     je      .40E
    74 00000272 B020                <1>     mov     al, ' '
    75 00000274 F7460C0400          <1>     test    [bp + 12], word 0b0100  ; if (flags & 0x04)
    76 00000279 7402                <1>     je     .42E
    77 0000027B B030                <1>     mov     al, '0'
    78                              <1> .42E:
    79 0000027D FD                  <1>     std                             ; DF = 1 (- direction)
    80 0000027E F3AA                <1>     rep stosb                       ; while(--cx) [di--] = al;
    81                              <1> .40E:
    82                              <1> 
    83                              <1> 
    84                              <1>     ; return registers' data
    85 00000280 5F                  <1>     pop     di
    86 00000281 5E                  <1>     pop     si
    87 00000282 5A                  <1>     pop     dx
    88 00000283 59                  <1>     pop     cx
    89 00000284 5B                  <1>     pop     bx
    90 00000285 58                  <1>     pop     ax
    91                              <1> 
    92                              <1>     ; destroy stack frame
    93 00000286 89EC                <1>     mov     sp, bp
    94 00000288 5D                  <1>     pop     bp
    95                              <1> 
    96 00000289 C3                  <1>     ret
    97                              <1> 
    98                              <1> 
    99 0000028A 303132333435363738- <1> .ascii: db  "0123456789ABCDEF"      ; ascii-short table
    99 00000293 39414243444546      <1>
   100                              <1> 
    90                                      %include    "../modules/real/get_drive_params.s"
     1                              <1> ; int get_drive_param(int drive)
     2                              <1> 
     3                              <1> ; set maximam accessible number of sectors, cylinders and heads coressponding drive number
     4                              <1> 
     5                              <1> ; drive: addr to drive struct
     6                              <1> ; return non-zero on success, and 0 on error 
     7                              <1> 
     8                              <1> 
     9                              <1> get_drive_params:
    10                              <1> 
    11                              <1>     ; build stack frame
    12 0000029A 55                  <1>     push    bp
    13 0000029B 89E5                <1>     mov     bp, sp
    14                              <1> 
    15                              <1>     ; save registers
    16 0000029D 53                  <1>     push    bx
    17 0000029E 51                  <1>     push    cx
    18 0000029F 06                  <1>     push    es
    19 000002A0 56                  <1>     push    si
    20 000002A1 57                  <1>     push    di
    21                              <1> 
    22                              <1>     
    23 000002A2 8B7604              <1>     mov     si, [bp + 4]                ; si = addr to drive struct
    24                              <1> 
    25                              <1>     ; initialize Disk Base Table pointer
    26 000002A5 B80000              <1>     mov     ax, 0
    27 000002A8 8EC0                <1>     mov     es, ax
    28 000002AA 89C7                <1>     mov     di, ax
    29                              <1> 
    30                              <1>     ; get current drive parameters
    31 000002AC B408                <1>     mov     ah, 8
    32 000002AE 8A14                <1>     mov     dl, [si + drive.no]
    33 000002B0 CD13                <1>     int     0x13
    34 000002B2 721A                <1>     jc      .10F
    35                              <1>     ; success
    36 000002B4 88C8                <1>     mov     al, cl
    37 000002B6 243F                <1>     and     al, 0x3F        ; ax = number of sectors
    38                              <1> 
    39 000002B8 C0E906              <1>     shr     cl, 6
    40 000002BB C1C908              <1>     ror     cx, 8
    41 000002BE 41                  <1>     inc     cx              ; cx = number of cylinders
    42                              <1> 
    43 000002BF 0FB6DE              <1>     movzx   bx, dh
    44 000002C2 43                  <1>     inc     bx              ; bx = number of heads
    45                              <1> 
    46 000002C3 894406              <1>     mov     [si + drive.sect], ax
    47 000002C6 894C02              <1>     mov     [si + drive.cyln], cx
    48 000002C9 895C04              <1>     mov     [si + drive.head], bx
    49                              <1> 
    50 000002CC EB03                <1>     jmp     .10E
    51                              <1>     ; error
    52                              <1> .10F:
    53 000002CE B80000              <1>     mov     ax, 0
    54                              <1> 
    55                              <1> 
    56                              <1> .10E:
    57                              <1>     ; return registers
    58 000002D1 5F                  <1>     pop     di
    59 000002D2 5E                  <1>     pop     si
    60 000002D3 07                  <1>     pop     es
    61 000002D4 59                  <1>     pop     cx
    62 000002D5 5B                  <1>     pop     bx
    63                              <1> 
    64                              <1>     ; destroy stack frame
    65 000002D6 89EC                <1>     mov     sp, bp
    66 000002D8 5D                  <1>     pop     bp
    67                              <1> 
    68 000002D9 C3                  <1>     ret
    91                                      %include    "../modules/real/get_font_adr.s"
     1                              <1> ; void get_font_adr(long adr);
     2                              <1> ; adr = addr to BIOS font data
     3                              <1> 
     4                              <1> get_font_data:
     5                              <1> 
     6                              <1>     ; build stack frame
     7 000002DA 55                  <1>     push    bp
     8 000002DB 89E5                <1>     mov     bp, sp
     9                              <1> 
    10                              <1>     ; save registers
    11 000002DD 50                  <1>     push    ax
    12 000002DE 53                  <1>     push    bx
    13 000002DF 56                  <1>     push    si
    14 000002E0 06                  <1>     push    es
    15 000002E1 55                  <1>     push    bp
    16                              <1> 
    17                              <1>     ; get the arg
    18 000002E2 8B7604              <1>     mov     si, [bp + 4]
    19                              <1>     
    20                              <1>     ; get BIOS font addr
    21 000002E5 B83011              <1>     mov     ax, 0x1130      ; get current character generator information
    22 000002E8 B706                <1>     mov     bh, 0x06        ; 8x16 character
    23 000002EA CD10                <1>     int     10h             ; ES:BP = font addr
    24                              <1> 
    25                              <1>     ; save font address
    26 000002EC 8C04                <1>     mov     [si + 0], es    ; segment
    27 000002EE 896C02              <1>     mov     [si + 2], bp    ; offset
    28                              <1> 
    29                              <1>     ; return registers
    30 000002F1 5D                  <1>     pop     bp
    31 000002F2 07                  <1>     pop     es
    32 000002F3 5E                  <1>     pop     si
    33 000002F4 5B                  <1>     pop     bx
    34 000002F5 58                  <1>     pop     ax
    35                              <1> 
    36                              <1>     ; destroy stack frame
    37 000002F6 89EC                <1>     mov     sp, bp
    38 000002F8 5D                  <1>     pop     bp
    39                              <1> 
    40 000002F9 C3                  <1>     ret
    92                                  
    93                                  stage_2:
    94 000002FA 68[7403]E8C0FD83C4-         cdecl   puts, .s0               ; display a message
    94 00000302 02                 
    95                                  
    96                                      ; get drive params
    97 00000303 68[B800]E891FF83C4-         cdecl   get_drive_params, BOOT
    97 0000030B 02                 
    98 0000030C 83F800                      cmp     ax, 0
    99 0000030F 750C                        jne     .10E
   100 00000311 68[AB03]E8A9FD83C4-         cdecl   puts, .e0               ; display an error message
   100 00000319 02                 
   101 0000031A E8C2FD                      call    reboot
   102                                  .10E:
   103                                      ; display information of drive params
   104 0000031D A1[B800]                    mov     ax, [BOOT + drive.no]
   105 00000320 6A046A106A0268-             cdecl   itoa, ax, .p1, 2, 16, 0b0100
   105 00000327 [8C03]50E8ECFE83C4-
   105 0000032F 0A                 
   106 00000330 A1[BA00]                    mov     ax, [BOOT + drive.cyln]
   107 00000333 6A046A106A0468-             cdecl   itoa, ax, .p2, 4, 16, 0b0100
   107 0000033A [9403]50E8D9FE83C4-
   107 00000342 0A                 
   108 00000343 A1[BC00]                    mov     ax, [BOOT + drive.head]
   109 00000346 6A046A106A0268-             cdecl   itoa, ax, .p3, 2, 16, 0b0100
   109 0000034D [9E03]50E8C6FE83C4-
   109 00000355 0A                 
   110 00000356 A1[BE00]                    mov     ax, [BOOT + drive.sect]
   111 00000359 6A046A106A0268-             cdecl   itoa, ax, .p4, 2, 16, 0b0100
   111 00000360 [A603]50E8B3FE83C4-
   111 00000368 0A                 
   112 00000369 68[8303]E851FD83C4-         cdecl   puts, .s1                       ; puts(.s1 ~ .p4)
   112 00000371 02                 
   113                                  
   114                                      ; transition to the 3rd stage
   115 00000372 EB52                        jmp     stage_3rd
   116                                  
   117 00000374 326E64207374616765-     .s0:    db  "2nd stage...", 0x0A, 0x0D, 0
   117 0000037D 2E2E2E0A0D00       
   118                                  
   119 00000383 2044726976653A3078      .s1:    db  " Drive:0x"
   120 0000038C 20202C20433A3078        .p1:    db  "  , C:0x"
   121 00000394 202020202C20483A30-     .p2:    db  "    , H:0x"
   121 0000039D 78                 
   122 0000039E 20202C20533A3078        .p3:    db  "  , S:0x"
   123 000003A6 20200A0D00              .p4:    db  "  ", 0x0A, 0x0D, 0
   124                                  
   125 000003AB 43616E277420676574-     .e0:    db  "Can't get drive parameter.", 0
   125 000003B4 206472697665207061-
   125 000003BD 72616D657465722E00 
   126                                  
   127                                  
   128                                      ; ----------------------------
   129                                      ; --- 3rd stage of booting ---
   130                                      ; ----------------------------
   131                                  
   132                                  stage_3rd:
   133 000003C6 68[0704]E8F4FC83C4-         cdecl   puts, .s0               ; display a message
   133 000003CE 02                 
   134                                  
   135                                      ; get BIOS font data
   136 000003CF 68[0002]E805FF83C4-         cdecl   get_font_data, FONT
   136 000003D7 02                 
   137                                  
   138                                      ; display font addr
   139 000003D8 6A046A106A0468-             cdecl   itoa, word[FONT.seg], .p1, 4, 16, 0b0100
   139 000003DF [2404]FF36[0002]E8-
   139 000003E6 31FE83C40A         
   140 000003EB 6A046A106A0468-             cdecl   itoa, word[FONT.off], .p2, 4, 16, 0b0100
   140 000003F2 [2904]FF36[0202]E8-
   140 000003F9 1EFE83C40A         
   141 000003FE 68[1604]E8BCFC83C4-         cdecl   puts, .s1
   141 00000406 02                 
   142                                  
   143                                  
   144 00000407 337264207374616765-     .s0:    db  "3rd stage...", 0x0A, 0x0D, 0
   144 00000410 2E2E2E0A0D00       
   145 00000416 20466F6E7420416464-     .s1:    db  " Font Address="
   145 0000041F 726573733D         
   146 00000424 5A5A5A5A3A              .p1:    db  "ZZZZ:"
   147 00000429 5A5A5A5A0A0D            .p2:    db  "ZZZZ", 0x0A, 0x0D
   148 0000042F 0A0D00                          db  0x0A, 0x0D, 0
   149                                  
   150                                  
   151                                      ; --- padding ---
   152 00000432 00<rept>                    times BOOT_SIZE - ($- $$)  db  0   ; up to 8K
