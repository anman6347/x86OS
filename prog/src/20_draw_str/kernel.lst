     1                                      ; --- macro ---
     2                                      %include    "../include/define.s"
     1                              <1> ; defines of important constants
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                       ; size of a sector
     4                              <1> 
     5                              <1> 
     6                              <1> BOOT_LOAD   equ     0x7c00                      ; addr where boot program loaded
     7                              <1> BOOT_SIZE   equ     (1024 * 8)                  ; size of boot code
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE)     ; number of sectors used in boot program
     9                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)     ; the end of boot code
    10                              <1> 
    11                              <1> E820_RECORD_SIZE    equ     20                  ; the record size (size of buffer for result) used in INT 0x15, EAX = 0xE820
    12                              <1> 
    13                              <1> 
    14                              <1> KERNEL_LOAD equ     0x0010_1000                 ; addr where the kernel loaded
    15                              <1> KERNEL_SIZE equ     (1024 * 8)                  ; size of the kernel
    16                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)   ; number of sectors used in kernel
     3                                      %include    "../include/macro.s"
     1                              <1> ; --- cdecl ---
     2                              <1> 
     3                              <1> %macro cdecl 1-*.nolist
     4                              <1>     %rep    %0 - 1
     5                              <1>         push    %{-1:-1}
     6                              <1>         %rotate -1
     7                              <1>     %endrep
     8                              <1>     %rotate -1
     9                              <1> 
    10                              <1>     call    %1
    11                              <1> 
    12                              <1>     %if 1 < %0          ; delete args
    13                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)      ; if realmode then __BITS__ = 16
    14                              <1>     %endif
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ; --- drive struct ---
    19                              <1> struc drive
    20 00000000 <res 00000002>      <1>     .no     resw    1       ; drive number
    21 00000002 <res 00000002>      <1>     .cyln   resw    1       ; cylinder
    22 00000004 <res 00000002>      <1>     .head   resw    1       ; head
    23 00000006 <res 00000002>      <1>     .sect   resw    1       ; sector
    24                              <1> endstruc
     4                                  
     5                                      ORG     KERNEL_LOAD
     6                                  
     7                                  [BITS 32]
     8                                  
     9                                      ; --- entry point ---
    10                                  kernel:
    11                                      ; get 8 * 16 BIOS font address (exsisted at the end of MBR)
    12 00000000 BE007E0000                  mov     esi, BOOT_LOAD + SECT_SIZE      ; ESI = 0x7c00 + 512
    13 00000005 0FB706                      movzx   eax, word [esi + 0]             ; segment for font addr (ESI + 0 not equals DS:ESI)
    14 00000008 0FB75E02                    movzx   ebx, word [esi + 2]             ; offset for font addr
    15 0000000C C1E004                      shl     eax , 4
    16 0000000F 01D8                        add     eax, ebx                        ; seg:off in real mode
    17 00000011 A3[40000000]                mov     [FONT_ADR], eax
    18                                  
    19                                      ; display all characters obtained by int 0x10 order
    20 00000016 6A0D6A3FE87D010000-         cdecl	draw_font, 63, 13
    20 0000001F 6683C408           
    21                                  
    22                                      ; Hello Kernel!
    23 00000023 68[44000000]680F04-         cdecl	draw_str, 25, 14, 0x040F, s0
    23 0000002B 00006A0E6A19E8A701-
    23 00000034 00006683C410       
    24                                  
    25                                      ; while(1)
    26 0000003A EBFE                        jmp     $
    27                                  
    28 0000003C 41                      .dbg:   db 65
    29                                  
    30 0000003D 00<rept>                ALIGN 4, db 0
    31 00000040 00000000                FONT_ADR:   dd  0
    32 00000044 48656C6C6F2C206B65-     s0:    db  "Hello, kernel!", 0x00
    32 0000004D 726E656C2100       
    33                                  ; --- modules ---
    34                                      %include    "../modules/protect/vga.s"
     1                              <1> ; definitions of
     2                              <1> ; void vga_set_read_plane(int32 plane);
     3                              <1> ; void vga_set_write_plane(int32 plane);
     4                              <1> ; void vram_font_copy(int32 font, int32 vram, int32 plane, int32 color)
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> ; --------------------------------------
     9                              <1> ; void vga_set_read_plane(int32 plane);
    10                              <1> ; plane : read-plane, uses only the low order 8 bits
    11                              <1> ; plane = |Reserved(0) * 6 | MAP * 2|
    12                              <1> ; MAP = 0 ~ 3 (Intensity = 3, R = 2, G = 1, B = 0)
    13                              <1> 
    14                              <1> vga_set_read_plane:
    15                              <1>     ; build stack frame
    16 00000053 55                  <1>     push    ebp
    17 00000054 89E5                <1>     mov     ebp, esp
    18                              <1> 
    19                              <1>     ; save registers' data
    20 00000056 50                  <1>     push    eax
    21 00000057 52                  <1>     push    edx
    22                              <1> 
    23                              <1>     ; select read-plane
    24 00000058 8A6508              <1>     mov     ah, [ebp + 8]       ; AH = read-plane
    25 0000005B 80E403              <1>     and     ah, 0x03
    26 0000005E B004                <1>     mov     al, 0x04            ; index of GR04(Read Plane Select Register)
    27 00000060 66BACE03            <1>     mov     dx, 0x03CE          ; I/O (or memory) address of GRX(Graphics Controller Index Register)
    28 00000064 66EF                <1>     out     dx, ax
    29                              <1> 
    30                              <1>     ; return registers' data
    31 00000066 5A                  <1>     pop     edx
    32 00000067 58                  <1>     pop     eax
    33                              <1> 
    34                              <1>     ; destroy stack frame
    35 00000068 89EC                <1>     mov     esp, ebp
    36 0000006A 5D                  <1>     pop     ebp
    37                              <1> 
    38 0000006B C3                  <1>     ret
    39                              <1> 
    40                              <1> 
    41                              <1> ; --------------------------------------
    42                              <1> ; void vga_set_read_plane(int32 plane);
    43                              <1> ; plane : write-plane, uses only the low order 8 bits
    44                              <1> ; plane = |Reserved(0) * 4 |I|R|G|B|
    45                              <1> 
    46                              <1> vga_set_write_plane:
    47                              <1>     ; build stack frame
    48 0000006C 55                  <1>     push    ebp
    49 0000006D 89E5                <1>     mov     ebp, esp
    50                              <1> 
    51                              <1>     ; save registers' data
    52 0000006F 50                  <1>     push    eax
    53 00000070 52                  <1>     push    edx
    54                              <1> 
    55                              <1>     ; select read-plane
    56 00000071 8A6508              <1>     mov     ah, [ebp + 8]       ; AH = read-plane(Reserved(0) * 4|luminance|R|G|B)
    57 00000074 80E40F              <1>     and     ah, 0x0F
    58 00000077 B002                <1>     mov     al, 0x02            ; index of SR02(Plane/Map Mask )
    59 00000079 66BAC403            <1>     mov     dx, 0x03C4          ; I/O (or memory) address of SRX(Sequencer Index)
    60 0000007D 66EF                <1>     out     dx, ax
    61                              <1> 
    62                              <1>     ; return registers' data
    63 0000007F 5A                  <1>     pop     edx
    64 00000080 58                  <1>     pop     eax
    65                              <1> 
    66                              <1>     ; destroy stack frame
    67 00000081 89EC                <1>     mov     esp, ebp
    68 00000083 5D                  <1>     pop     ebp
    69                              <1> 
    70 00000084 C3                  <1>     ret
    71                              <1> 
    72                              <1> 
    73                              <1> ; --------------------------------------
    74                              <1> ; void vram_font_copy(int32 font, int32 vram, int32 plane, int32 color)
    75                              <1> ; write font data to selected plane
    76                              <1> ;
    77                              <1> ; font : font addr of a character
    78                              <1> ; vram : vram addr where the character will be wrote
    79                              <1> ; plane : write-plane, uses only the low order 8 bits
    80                              <1> ; color : color of character on screen. this uses only the low order 16 bits
    81                              <1> ; color = |Reserved(0) * 4|back I|back R|back G|back B|Reserved(0) * 3|Transmission flag for front character|front I|front R|front G|front B|
    82                              <1> 
    83                              <1> vram_font_copy:
    84                              <1>     ; build stack frame
    85 00000085 55                  <1>     push    ebp
    86 00000086 89E5                <1>     mov     ebp, esp
    87                              <1> 
    88                              <1>     ; save registers' data
    89 00000088 50                  <1>     push    eax
    90 00000089 53                  <1>     push    ebx
    91 0000008A 51                  <1>     push    ecx
    92 0000008B 52                  <1>     push    edx
    93 0000008C 56                  <1>     push    esi
    94 0000008D 57                  <1>     push    edi
    95                              <1> 
    96                              <1>     ; get each args
    97 0000008E 8B7508              <1>     mov     esi, [ebp + 8]          ; ESI = font addr
    98 00000091 8B7D0C              <1>     mov     edi, [ebp + 12]         ; EDI = vram addr
    99 00000094 0FB64510            <1>     movzx   eax, byte [ebp + 16]    ; EAX = plane
   100 00000098 0FB75D14            <1>     movzx   ebx, word [ebp + 20]    ; EBX = color
   101                              <1> 
   102                              <1>     ; dh = bool of write or not write back image
   103 0000009C 84C7                <1>     test    bh, al                  ; ZF = back color & write-plane
   104 0000009E 0F94C6              <1>     setz    dh                      ; AH = (ZF ? 1 : 0)
   105 000000A1 FECE                <1>     dec     dh                      ; DH = 0x00 or 0xFF
   106                              <1>     ; dl = bool of write or not write front image
   107 000000A3 84C3                <1>     test    bl, al                  ; ZF = front color & write-plane
   108 000000A5 0F94C2              <1>     setz    dl                      ; AL = (ZF ? 1 : 0)
   109 000000A8 FECA                <1>     dec     dl                      ; DL = 0x00 or 0xFF
   110                              <1> 
   111                              <1>     ; copy 16bit font data
   112 000000AA FC                  <1>     cld
   113 000000AB B910000000          <1>     mov     ecx, 16
   114                              <1> .10L:                               ; do {
   115 000000B0 AC                  <1>     lodsb                           ;   AL = *(ESI++);
   116 000000B1 88C4                <1>     mov     ah, al
   117 000000B3 F6D4                <1>     not     ah                      ;   make inverted image;
   118                              <1> 
   119                              <1>     ; front
   120 000000B5 20D0                <1>     and     al, dl                  ;   if (DL) write front image;
   121                              <1> 
   122                              <1>     ; back
   123 000000B7 F7C310000000        <1>     test    ebx, 0x0010             ;   if (Transmission) {
   124 000000BD 7404                <1>     jz      .11F
   125 000000BF 2227                <1>     and     ah, [edi]               ;       AH = !image & State before rewriting   
   126 000000C1 EB02                <1> 	jmp     .11E                    ;   } else {    
   127                              <1> .11F:
   128 000000C3 20F4                <1>     and     ah, dh                  ;       AH = !image & specified background color
   129                              <1>                                     ;   }
   130                              <1> .11E:
   131 000000C5 08E0                <1>     or      al, ah                  ; AL = front | back
   132                              <1> 
   133                              <1> 
   134 000000C7 8807                <1>     mov     [edi], al               ; write character or background to VRAM
   135                              <1> 
   136 000000C9 83C750              <1>     add     edi, 80                 ; go to next line
   137 000000CC E2E2                <1>     loop    .10L                    ; } while (--ECX)
   138                              <1> 
   139                              <1> 
   140                              <1>     ; return registers' data
   141 000000CE 5F                  <1>     pop		edi
   142 000000CF 5E                  <1>     pop		esi
   143 000000D0 5A                  <1>     pop		edx
   144 000000D1 59                  <1>     pop		ecx
   145 000000D2 5B                  <1>     pop		ebx
   146 000000D3 58                  <1>     pop		eax
   147                              <1> 
   148                              <1>     ; destroy stack frame
   149 000000D4 89EC                <1>     mov     esp, ebp
   150 000000D6 5D                  <1>     pop     ebp
   151                              <1> 
   152 000000D7 C3                  <1>     ret
    35                                      %include    "../modules/protect/draw_char.s"
     1                              <1> ; void draw_char(int32 col, int32 row, int32 color, int32 ch);
     2                              <1> 
     3                              <1> ; display one specified character at the specified location
     4                              <1> 
     5                              <1> 
     6                              <1> ; col: column where the character is displayed. this parm must take a value between 0 and 79.
     7                              <1> ; row: row where the character is displayed. this parm must take a value between 0 and 29.
     8                              <1> ; col and row is not XY dot of screen
     9                              <1> 
    10                              <1> ; color : color of the character. this uses only the low order 16 bits
    11                              <1> ; color = color = |Reserved(0) * 4|back I|back R|back G|back B|Reserved(0) * 3|Transmission flag for front character|front I|front R|front G|front B|
    12                              <1> ; ch: ASCII character code
    13                              <1> 
    14                              <1> draw_char:
    15                              <1>     ; build stack frame
    16 000000D8 55                  <1>     push    ebp
    17 000000D9 89E5                <1>     mov     ebp, esp
    18                              <1> 
    19                              <1>     ; save registers' data
    20 000000DB 50                  <1>     push    eax
    21 000000DC 53                  <1>     push    ebx
    22 000000DD 51                  <1>     push    ecx
    23 000000DE 52                  <1>     push    edx
    24 000000DF 56                  <1>     push    esi
    25 000000E0 57                  <1>     push    edi
    26                              <1> 
    27                              <1> 
    28                              <1>     ; get font address
    29 000000E1 0FB67514            <1>     movzx   esi, byte [ebp + 20]
    30 000000E5 C1E604              <1>     shl     esi, 4                      ; ESI *= 16, size of character = 16byte
    31 000000E8 0335[40000000]      <1>     add     esi, [FONT_ADR]
    32                              <1> 
    33                              <1> 
    34                              <1>     ; get vram address where the character will be wrote
    35                              <1>     ; 0xA0000 + (640 / 8) * 16 * y + x, x = col, y = row
    36 000000EE 8B7D0C              <1>     mov     edi, [ebp + 12]                 ; EDI = y(row) 
    37 000000F1 C1E708              <1>     shl     edi, 8                          ; 80 * 16 = 256 * 5 = 256 * 4 + 256
    38 000000F4 8DBCBF00000A00      <1>     lea     edi, [0xA0000 + edi * 4 + edi]
    39 000000FB 037D08              <1>     add     edi, [ebp + 8]                  ; EDI += x(col)
    40                              <1> 
    41                              <1> 
    42                              <1>     ; display 1 character
    43 000000FE 0FB75D10            <1>     movzx   ebx, word[ebp + 16]             ; EBX = color
    44                              <1>     ; Intensity
    45 00000102 6A03E84AFFFFFF6683- <1>     cdecl   vga_set_read_plane, 0x03        
    45 0000010B C404                <1>
    46 0000010D 6A08E858FFFFFF6683- <1>     cdecl   vga_set_write_plane, 0x08
    46 00000116 C404                <1>
    47 00000118 536A085756E863FFFF- <1>     cdecl   vram_font_copy, esi, edi, 0x08, ebx
    47 00000121 FF6683C410          <1>
    48                              <1>     ; Red
    49 00000126 6A02E826FFFFFF6683- <1>     cdecl	vga_set_read_plane, 0x02
    49 0000012F C404                <1>
    50 00000131 6A04E834FFFFFF6683- <1>     cdecl	vga_set_write_plane, 0x04
    50 0000013A C404                <1>
    51 0000013C 536A045756E83FFFFF- <1>     cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 00000145 FF6683C410          <1>
    52                              <1>     ; Green
    53 0000014A 6A01E802FFFFFF6683- <1>     cdecl	vga_set_read_plane, 0x01
    53 00000153 C404                <1>
    54 00000155 6A02E810FFFFFF6683- <1>     cdecl	vga_set_write_plane, 0x02
    54 0000015E C404                <1>
    55 00000160 536A025756E81BFFFF- <1>     cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 00000169 FF6683C410          <1>
    56                              <1>     ; Blue
    57 0000016E 6A00E8DEFEFFFF6683- <1>     cdecl	vga_set_read_plane, 0x00
    57 00000177 C404                <1>
    58 00000179 6A01E8ECFEFFFF6683- <1>     cdecl	vga_set_write_plane, 0x01
    58 00000182 C404                <1>
    59 00000184 536A015756E8F7FEFF- <1>     cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 0000018D FF6683C410          <1>
    60                              <1> 
    61                              <1> 
    62                              <1>     ; return registers' data
    63 00000192 5F                  <1>     pop     edi
    64 00000193 5E                  <1>     pop     esi
    65 00000194 5A                  <1>     pop     edx
    66 00000195 59                  <1>     pop     ecx
    67 00000196 5B                  <1>     pop     ebx
    68 00000197 58                  <1>     pop     eax
    69                              <1> 
    70                              <1> 
    71                              <1>     ; destroy stack frame
    72 00000198 89EC                <1>     mov     esp, ebp
    73 0000019A 5D                  <1>     pop     ebp
    74                              <1> 
    75 0000019B C3                  <1>     ret
    36                                      %include    "../modules/protect/draw_font.s"
     1                              <1> ; void draw_font(int32 col, int32 row);
     2                              <1> 
     3                              <1> ; display all characters obtained by int 0x10 order
     4                              <1> 
     5                              <1> ; col: column where the character is displayed. this parm must take a value between 0 and 79.
     6                              <1> ; row: row where the character is displayed. this parm must take a value between 0 and 29.
     7                              <1> ; col and row is not XY dot of screen
     8                              <1> 
     9                              <1> draw_font:
    10                              <1>     ; build stack frame
    11 0000019C 55                  <1>     push    ebp
    12 0000019D 89E5                <1>     mov     ebp, esp
    13                              <1> 
    14                              <1>     ; save registers' data
    15 0000019F 50                  <1>     push    eax
    16 000001A0 53                  <1>     push    ebx
    17 000001A1 51                  <1>     push    ecx
    18 000001A2 52                  <1>     push    edx
    19 000001A3 56                  <1>     push    esi
    20 000001A4 57                  <1>     push    edi
    21                              <1> 
    22                              <1>     ; get args
    23 000001A5 8B7508              <1>     mov     esi, [ebp + 8]      ; ESI = x(col)
    24 000001A8 8B7D0C              <1>     mov     edi, [ebp + 12]     ; EDI = y(row)
    25                              <1> 
    26                              <1>     ; display all characters obtained by int 0x10 order
    27 000001AB B900000000          <1>     mov     ecx, 0
    28                              <1> .10L:
    29 000001B0 81F900010000        <1>     cmp     ecx, 256                            ; while (ECX < 256) {
    30 000001B6 731F                <1>     jae     .10E 
    31                              <1> 
    32                              <1>     ; calc x(col)
    33 000001B8 89C8                <1>     mov     eax, ecx                            ;   EAX = ECX;
    34 000001BA 83E00F              <1>     and     eax, 0x0F                           ;   EAX &= 0x0F;
    35 000001BD 01F0                <1>     add     eax, esi                            ;   EAX += x;
    36                              <1>     ; calc y(row)
    37 000001BF 89CB                <1>     mov     ebx, ecx                            ;   EBX = ECX;
    38 000001C1 C1EB04              <1>     shr     ebx, 4                              ;   EBX /= 16;
    39 000001C4 01FB                <1>     add     ebx, edi                            ;   EBX += y;
    40                              <1> 
    41 000001C6 516A075350E808FFFF- <1>     cdecl   draw_char, eax, ebx, 0x07, ecx      ;   draw_char();
    41 000001CF FF6683C410          <1>
    42                              <1> 
    43 000001D4 41                  <1>     inc     ecx                                 ;   ECX++;
    44 000001D5 EBD9                <1>     jmp     .10L                                ; }
    45                              <1> .10E:
    46                              <1> 
    47                              <1>     ; return registers' data
    48 000001D7 5A                  <1>     pop     edx
    49 000001D8 58                  <1>     pop     eax
    50                              <1> 
    51                              <1>     ; destroy stack frame
    52 000001D9 89EC                <1>     mov     esp, ebp
    53 000001DB 5D                  <1>     pop     ebp
    54                              <1> 
    55 000001DC C3                  <1>     ret
    56                              <1> 
    37                                      %include	"../modules/protect/draw_str.s"
     1                              <1> ; void draw_str(int32 col, int32 row, int32 color, int32 p);
     2                              <1> 
     3                              <1> ; display string
     4                              <1> 
     5                              <1> ; col: column where the character is displayed. this parm must take a value between 0 and 79.
     6                              <1> ; row: row where the character is displayed. this parm must take a value between 0 and 29.
     7                              <1> ; col and row is not XY dot of screen
     8                              <1> 
     9                              <1> ; color : color of the string. this uses only the low order 16 bits
    10                              <1> ; color = color = |Reserved(0) * 4|back I|back R|back G|back B|Reserved(0) * 3|Transmission flag for front character|front I|front R|front G|front B|
    11                              <1> 
    12                              <1> ; p : addr of the string
    13                              <1> 
    14                              <1> 
    15                              <1> draw_str:
    16                              <1>     ; build stack frame
    17 000001DD 55                  <1>     push    ebp
    18 000001DE 89E5                <1>     mov     ebp, esp
    19                              <1> 
    20                              <1>     ; save registers' data
    21 000001E0 50                  <1>     push    eax
    22 000001E1 53                  <1>     push    ebx
    23 000001E2 51                  <1>     push    ecx
    24 000001E3 52                  <1>     push    edx
    25 000001E4 56                  <1>     push    esi
    26                              <1> 
    27                              <1>     ; get args
    28 000001E5 8B4D08              <1>     mov     ecx, [ebp + 8]          ; ECX = x(col);
    29 000001E8 8B550C              <1>     mov     edx, [ebp + 12]         ; EDX = y(row);
    30 000001EB 0FB75D10            <1>     movzx   ebx, word [ebp + 16]    ; EBX = color;
    31 000001EF 8B7514              <1>     mov     esi, [ebp + 20]         ; ESI = p;
    32                              <1> 
    33                              <1> ;    push    .DBG
    34                              <1> ;    pop     esi
    35                              <1> 
    36                              <1> 
    37                              <1>     ;mov     esi, [.DBG]
    38                              <1>     ;mov     al, [esi]
    39                              <1>     ;cdecl   draw_char, ecx, 0, ebx, eax   ;   draw_char();
    40                              <1> 
    41                              <1> 
    42                              <1> 
    43                              <1>     ; display string
    44 000001F2 FC                  <1>     cld                                     ; DF = 0;
    45 000001F3 B800000000          <1>     mov     eax, 0
    46                              <1> .10L:                                       ; do {
    47 000001F8 AC                  <1>     lodsb                                   ;   AL = *(ESI++);
    48                              <1> 
    49 000001F9 3C00                <1>     cmp     al, 0                           ;   if (AL == NULL) break;
    50 000001FB 7425                <1>     je      .10E
    51                              <1>     
    52                              <1>     ; display one character
    53 000001FD 50535251E8D2FEFFFF- <1>     cdecl   draw_char, ecx, edx, ebx, eax   ;   draw_char();
    53 00000206 6683C410            <1>
    54                              <1>     
    55                              <1>     ; calc the position of next character
    56 0000020A 41                  <1>     inc     ecx                             ;   ECX++
    57 0000020B 83F950              <1>     cmp     ecx, 80                         ;   if (ECX >= 80) {
    58 0000020E 7C10                <1>     jl      .12E
    59 00000210 B900000000          <1>     mov     ecx, 0                          ;       ECX = 0;
    60 00000215 42                  <1>     inc     edx                             ;       EDX++;
    61 00000216 83FA1E              <1>     cmp     edx, 30                         ;       if (EDX >= 30) {
    62 00000219 7C05                <1>     jl      .12E
    63 0000021B BA00000000          <1>     mov     edx, 0                          ;           EDX = 0;
    64                              <1>                                             ;       }
    65                              <1>                                             ;   }
    66                              <1> .12E:
    67 00000220 EBD6                <1>     jmp     .10L                            ; } while (1);
    68                              <1> .10E:
    69                              <1> 
    70                              <1>     ; return registers' data
    71 00000222 5E                  <1>     pop     esi
    72 00000223 5A                  <1>     pop     edx
    73 00000224 59                  <1>     pop     ecx
    74 00000225 5B                  <1>     pop     ebx
    75 00000226 58                  <1>     pop     eax
    76                              <1> 
    77                              <1>     ; destroy stack frame
    78 00000227 89EC                <1>     mov     esp, ebp
    79 00000229 5D                  <1>     pop     ebp
    80                              <1> 
    81 0000022A C3                  <1>     ret
    82 0000022B 4100                <1> .DBG:   db  'A', 0x00
    38                                  
    39                                  ; --- padding ---
    40 0000022D 00<rept>                    times KERNEL_SIZE - ($ - $$) db 0x00
