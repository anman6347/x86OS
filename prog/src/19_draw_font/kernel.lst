     1                                      ; --- macro ---
     2                                      %include    "../include/define.s"
     1                              <1> ; defines of important constants
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                       ; size of a sector
     4                              <1> 
     5                              <1> 
     6                              <1> BOOT_LOAD   equ     0x7c00                      ; addr where boot program loaded
     7                              <1> BOOT_SIZE   equ     (1024 * 8)                  ; size of boot code
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE)     ; number of sectors used in boot program
     9                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)     ; the end of boot code
    10                              <1> 
    11                              <1> E820_RECORD_SIZE    equ     20                  ; the record size (size of buffer for result) used in INT 0x15, EAX = 0xE820
    12                              <1> 
    13                              <1> 
    14                              <1> KERNEL_LOAD equ     0x0010_1000                 ; addr where the kernel loaded
    15                              <1> KERNEL_SIZE equ     (1024 * 8)                  ; size of the kernel
    16                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)   ; number of sectors used in kernel
     3                                      %include    "../include/macro.s"
     1                              <1> ; --- cdecl ---
     2                              <1> 
     3                              <1> %macro cdecl 1-*.nolist
     4                              <1>     %rep    %0 - 1
     5                              <1>         push    %{-1:-1}
     6                              <1>         %rotate -1
     7                              <1>     %endrep
     8                              <1>     %rotate -1
     9                              <1> 
    10                              <1>     call    %1
    11                              <1> 
    12                              <1>     %if 1 < %0          ; delete args
    13                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)      ; if realmode then __BITS__ = 16
    14                              <1>     %endif
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ; --- drive struct ---
    19                              <1> struc drive
    20 00000000 <res 00000002>      <1>     .no     resw    1       ; drive number
    21 00000002 <res 00000002>      <1>     .cyln   resw    1       ; cylinder
    22 00000004 <res 00000002>      <1>     .head   resw    1       ; head
    23 00000006 <res 00000002>      <1>     .sect   resw    1       ; sector
    24                              <1> endstruc
     4                                  
     5                                      ORG     KERNEL_LOAD
     6                                  
     7                                  [BITS 32]
     8                                  
     9                                      ; --- entry point ---
    10                                  kernel:
    11                                      ; get 8 * 16 BIOS font address (exsisted at the end of MBR)
    12 00000000 BE007E0000                  mov     esi, BOOT_LOAD + SECT_SIZE      ; ESI = 0x7c00 + 512
    13 00000005 0FB706                      movzx   eax, word [esi + 0]             ; segment for font addr (ESI + 0 not equals DS:ESI)
    14 00000008 0FB75E02                    movzx   ebx, word [esi + 2]             ; offset for font addr
    15 0000000C C1E004                      shl     eax , 4
    16 0000000F 01D8                        add     eax, ebx                        ; seg:off in real mode
    17 00000011 A3[28000000]                mov     [FONT_ADR], eax
    18                                  
    19                                      ; display all characters obtained by int 0x10 order
    20 00000016 6A0D6A3FE856010000-         cdecl	draw_font, 63, 13
    20 0000001F 6683C408           
    21                                  
    22                                  
    23                                      ; while(1)
    24 00000023 EBFE                        jmp     $
    25                                  
    26                                  
    27 00000025 00<rept>                ALIGN 4, db 0
    28 00000028 00000000                FONT_ADR:   dd  0
    29                                  
    30                                  ; --- modules ---
    31                                      %include    "../modules/protect/vga.s"
     1                              <1> ; definitions of
     2                              <1> ; void vga_set_read_plane(int32 plane);
     3                              <1> ; void vga_set_write_plane(int32 plane);
     4                              <1> ; void vram_font_copy(int32 font, int32 vram, int32 plane, int32 color)
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> ; --------------------------------------
     9                              <1> ; void vga_set_read_plane(int32 plane);
    10                              <1> ; plane : read-plane, uses only the low order 8 bits
    11                              <1> ; plane = |Reserved(0) * 6 | MAP * 2|
    12                              <1> ; MAP = 0 ~ 3 (Intensity = 3, R = 2, G = 1, B = 0)
    13                              <1> 
    14                              <1> vga_set_read_plane:
    15                              <1>     ; build stack frame
    16 0000002C 55                  <1>     push    ebp
    17 0000002D 89E5                <1>     mov     ebp, esp
    18                              <1> 
    19                              <1>     ; save registers' data
    20 0000002F 50                  <1>     push    eax
    21 00000030 52                  <1>     push    edx
    22                              <1> 
    23                              <1>     ; select read-plane
    24 00000031 8A6508              <1>     mov     ah, [ebp + 8]       ; AH = read-plane
    25 00000034 80E403              <1>     and     ah, 0x03
    26 00000037 B004                <1>     mov     al, 0x04            ; index of GR04(Read Plane Select Register)
    27 00000039 66BACE03            <1>     mov     dx, 0x03CE          ; I/O (or memory) address of GRX(Graphics Controller Index Register)
    28 0000003D 66EF                <1>     out     dx, ax
    29                              <1> 
    30                              <1>     ; return registers' data
    31 0000003F 5A                  <1>     pop     edx
    32 00000040 58                  <1>     pop     eax
    33                              <1> 
    34                              <1>     ; destroy stack frame
    35 00000041 89EC                <1>     mov     esp, ebp
    36 00000043 5D                  <1>     pop     ebp
    37                              <1> 
    38 00000044 C3                  <1>     ret
    39                              <1> 
    40                              <1> 
    41                              <1> ; --------------------------------------
    42                              <1> ; void vga_set_read_plane(int32 plane);
    43                              <1> ; plane : write-plane, uses only the low order 8 bits
    44                              <1> ; plane = |Reserved(0) * 4 |I|R|G|B|
    45                              <1> 
    46                              <1> vga_set_write_plane:
    47                              <1>     ; build stack frame
    48 00000045 55                  <1>     push    ebp
    49 00000046 89E5                <1>     mov     ebp, esp
    50                              <1> 
    51                              <1>     ; save registers' data
    52 00000048 50                  <1>     push    eax
    53 00000049 52                  <1>     push    edx
    54                              <1> 
    55                              <1>     ; select read-plane
    56 0000004A 8A6508              <1>     mov     ah, [ebp + 8]       ; AH = read-plane(Reserved(0) * 4|luminance|R|G|B)
    57 0000004D 80E40F              <1>     and     ah, 0x0F
    58 00000050 B002                <1>     mov     al, 0x02            ; index of SR02(Plane/Map Mask )
    59 00000052 66BAC403            <1>     mov     dx, 0x03C4          ; I/O (or memory) address of SRX(Sequencer Index)
    60 00000056 66EF                <1>     out     dx, ax
    61                              <1> 
    62                              <1>     ; return registers' data
    63 00000058 5A                  <1>     pop     edx
    64 00000059 58                  <1>     pop     eax
    65                              <1> 
    66                              <1>     ; destroy stack frame
    67 0000005A 89EC                <1>     mov     esp, ebp
    68 0000005C 5D                  <1>     pop     ebp
    69                              <1> 
    70 0000005D C3                  <1>     ret
    71                              <1> 
    72                              <1> 
    73                              <1> ; --------------------------------------
    74                              <1> ; void vram_font_copy(int32 font, int32 vram, int32 plane, int32 color)
    75                              <1> ; write font data to selected plane
    76                              <1> ;
    77                              <1> ; font : font addr of a character
    78                              <1> ; vram : vram addr where the character will be wrote
    79                              <1> ; plane : write-plane, uses only the low order 8 bits
    80                              <1> ; color : color of character on screen. this uses only the low order 16 bits
    81                              <1> ; color = |Reserved(0) * 4|back I|back R|back G|back B|Reserved(0) * 3|Transmission flag for front character|front I|front R|front G|front B|
    82                              <1> 
    83                              <1> vram_font_copy:
    84                              <1>     ; build stack frame
    85 0000005E 55                  <1>     push    ebp
    86 0000005F 89E5                <1>     mov     ebp, esp
    87                              <1> 
    88                              <1>     ; save registers' data
    89 00000061 50                  <1>     push    eax
    90 00000062 53                  <1>     push    ebx
    91 00000063 51                  <1>     push    ecx
    92 00000064 52                  <1>     push    edx
    93 00000065 56                  <1>     push    esi
    94 00000066 57                  <1>     push    edi
    95                              <1> 
    96                              <1>     ; get each args
    97 00000067 8B7508              <1>     mov     esi, [ebp + 8]          ; ESI = font addr
    98 0000006A 8B7D0C              <1>     mov     edi, [ebp + 12]         ; EDI = vram addr
    99 0000006D 0FB64510            <1>     movzx   eax, byte [ebp + 16]    ; EAX = plane
   100 00000071 0FB75D14            <1>     movzx   ebx, word [ebp + 20]    ; EBX = color
   101                              <1> 
   102                              <1>     ; dh = bool of write or not write back image
   103 00000075 84C7                <1>     test    bh, al                  ; ZF = back color & write-plane
   104 00000077 0F94C6              <1>     setz    dh                      ; AH = (ZF ? 1 : 0)
   105 0000007A FECE                <1>     dec     dh                      ; DH = 0x00 or 0xFF
   106                              <1>     ; dl = bool of write or not write front image
   107 0000007C 84C3                <1>     test    bl, al                  ; ZF = front color & write-plane
   108 0000007E 0F94C2              <1>     setz    dl                      ; AL = (ZF ? 1 : 0)
   109 00000081 FECA                <1>     dec     dl                      ; DL = 0x00 or 0xFF
   110                              <1> 
   111                              <1>     ; copy 16bit font data
   112 00000083 FC                  <1>     cld
   113 00000084 B910000000          <1>     mov     ecx, 16
   114                              <1> .10L:                               ; do {
   115 00000089 AC                  <1>     lodsb                           ;   AL = *(ESI++);
   116 0000008A 88C4                <1>     mov     ah, al
   117 0000008C F6D4                <1>     not     ah                      ;   make inverted image;
   118                              <1> 
   119                              <1>     ; front
   120 0000008E 20D0                <1>     and     al, dl                  ;   if (DL) write front image;
   121                              <1> 
   122                              <1>     ; back
   123 00000090 F7C310000000        <1>     test    ebx, 0x0010             ;   if (Transmission) {
   124 00000096 7404                <1>     jz      .11F
   125 00000098 2227                <1>     and     ah, [edi]               ;       AH = !image & State before rewriting   
   126 0000009A EB02                <1> 	jmp     .11E                    ;   } else {    
   127                              <1> .11F:
   128 0000009C 20F4                <1>     and     ah, dh                  ;       AH = !image & specified background color
   129                              <1>                                     ;   }
   130                              <1> .11E:
   131 0000009E 08E0                <1>     or      al, ah                  ; AL = front | back
   132                              <1> 
   133                              <1> 
   134 000000A0 8807                <1>     mov     [edi], al               ; write character or background to VRAM
   135                              <1> 
   136 000000A2 83C750              <1>     add     edi, 80                 ; go to next line
   137 000000A5 E2E2                <1>     loop    .10L                    ; } while (--ECX)
   138                              <1> 
   139                              <1> 
   140                              <1>     ; return registers' data
   141 000000A7 5F                  <1>     pop		edi
   142 000000A8 5E                  <1>     pop		esi
   143 000000A9 5A                  <1>     pop		edx
   144 000000AA 59                  <1>     pop		ecx
   145 000000AB 5B                  <1>     pop		ebx
   146 000000AC 58                  <1>     pop		eax
   147                              <1> 
   148                              <1>     ; destroy stack frame
   149 000000AD 89EC                <1>     mov     esp, ebp
   150 000000AF 5D                  <1>     pop     ebp
   151                              <1> 
   152 000000B0 C3                  <1>     ret
    32                                      %include    "../modules/protect/draw_char.s"
     1                              <1> ; void draw_char(int32 col, int32 row, int32 color, int32 ch);
     2                              <1> 
     3                              <1> ; display one specified character at the specified location
     4                              <1> 
     5                              <1> 
     6                              <1> ; col: column where the character is displayed. this parm must take a value between 0 and 79.
     7                              <1> ; row: row where the character is displayed. this parm must take a value between 0 and 29.
     8                              <1> ; col and row is not XY dot of screen
     9                              <1> 
    10                              <1> ; color : color of the character. this uses only the low order 16 bits
    11                              <1> ; color = color = |Reserved(0) * 4|back I|back R|back G|back B|Reserved(0) * 3|Transmission flag for front character|front I|front R|front G|front B|
    12                              <1> ; ch: ASCII character code
    13                              <1> 
    14                              <1> draw_char:
    15                              <1>     ; build stack frame
    16 000000B1 55                  <1>     push    ebp
    17 000000B2 89E5                <1>     mov     ebp, esp
    18                              <1> 
    19                              <1>     ; save registers' data
    20 000000B4 50                  <1>     push    eax
    21 000000B5 53                  <1>     push    ebx
    22 000000B6 51                  <1>     push    ecx
    23 000000B7 52                  <1>     push    edx
    24 000000B8 56                  <1>     push    esi
    25 000000B9 57                  <1>     push    edi
    26                              <1> 
    27                              <1> 
    28                              <1>     ; get font address
    29 000000BA 0FB67514            <1>     movzx   esi, byte [ebp + 20]
    30 000000BE C1E604              <1>     shl     esi, 4                      ; ESI *= 16, size of character = 16byte
    31 000000C1 0335[28000000]      <1>     add     esi, [FONT_ADR]
    32                              <1> 
    33                              <1> 
    34                              <1>     ; get vram address where the character will be wrote
    35                              <1>     ; 0xA0000 + (640 / 8) * 16 * y + x, x = col, y = row
    36 000000C7 8B7D0C              <1>     mov     edi, [ebp + 12]                 ; EDI = y(row) 
    37 000000CA C1E708              <1>     shl     edi, 8                          ; 80 * 16 = 256 * 5 = 256 * 4 + 256
    38 000000CD 8DBCBF00000A00      <1>     lea     edi, [0xA0000 + edi * 4 + edi]
    39 000000D4 037D08              <1>     add     edi, [ebp + 8]                  ; EDI += x(col)
    40                              <1> 
    41                              <1> 
    42                              <1>     ; display 1 character
    43 000000D7 0FB75D10            <1>     movzx   ebx, word[ebp + 16]             ; EBX = color
    44                              <1>     ; Intensity
    45 000000DB 6A03E84AFFFFFF6683- <1>     cdecl   vga_set_read_plane, 0x03        
    45 000000E4 C404                <1>
    46 000000E6 6A08E858FFFFFF6683- <1>     cdecl   vga_set_write_plane, 0x08
    46 000000EF C404                <1>
    47 000000F1 536A085756E863FFFF- <1>     cdecl   vram_font_copy, esi, edi, 0x08, ebx
    47 000000FA FF6683C410          <1>
    48                              <1>     ; Red
    49 000000FF 6A02E826FFFFFF6683- <1>     cdecl	vga_set_read_plane, 0x02
    49 00000108 C404                <1>
    50 0000010A 6A04E834FFFFFF6683- <1>     cdecl	vga_set_write_plane, 0x04
    50 00000113 C404                <1>
    51 00000115 536A045756E83FFFFF- <1>     cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 0000011E FF6683C410          <1>
    52                              <1>     ; Green
    53 00000123 6A01E802FFFFFF6683- <1>     cdecl	vga_set_read_plane, 0x01
    53 0000012C C404                <1>
    54 0000012E 6A02E810FFFFFF6683- <1>     cdecl	vga_set_write_plane, 0x02
    54 00000137 C404                <1>
    55 00000139 536A025756E81BFFFF- <1>     cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 00000142 FF6683C410          <1>
    56                              <1>     ; Blue
    57 00000147 6A00E8DEFEFFFF6683- <1>     cdecl	vga_set_read_plane, 0x00
    57 00000150 C404                <1>
    58 00000152 6A01E8ECFEFFFF6683- <1>     cdecl	vga_set_write_plane, 0x01
    58 0000015B C404                <1>
    59 0000015D 536A015756E8F7FEFF- <1>     cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 00000166 FF6683C410          <1>
    60                              <1> 
    61                              <1> 
    62                              <1>     ; return registers' data
    63 0000016B 5F                  <1>     pop     edi
    64 0000016C 5E                  <1>     pop     esi
    65 0000016D 5A                  <1>     pop     edx
    66 0000016E 59                  <1>     pop     ecx
    67 0000016F 5B                  <1>     pop     ebx
    68 00000170 58                  <1>     pop     eax
    69                              <1> 
    70                              <1> 
    71                              <1>     ; destroy stack frame
    72 00000171 89EC                <1>     mov     esp, ebp
    73 00000173 5D                  <1>     pop     ebp
    74                              <1> 
    75 00000174 C3                  <1>     ret
    33                                      %include    "../modules/protect/draw_font.s"
     1                              <1> ; void draw_font(int32 col, int32 row);
     2                              <1> 
     3                              <1> ; display all characters obtained by int 0x10 order
     4                              <1> 
     5                              <1> ; col: column where the character is displayed. this parm must take a value between 0 and 79.
     6                              <1> ; row: row where the character is displayed. this parm must take a value between 0 and 29.
     7                              <1> ; col and row is not XY dot of screen
     8                              <1> 
     9                              <1> draw_font:
    10                              <1>     ; build stack frame
    11 00000175 55                  <1>     push    ebp
    12 00000176 89E5                <1>     mov     ebp, esp
    13                              <1> 
    14                              <1>     ; save registers' data
    15 00000178 50                  <1>     push    eax
    16 00000179 53                  <1>     push    ebx
    17 0000017A 51                  <1>     push    ecx
    18 0000017B 52                  <1>     push    edx
    19 0000017C 56                  <1>     push    esi
    20 0000017D 57                  <1>     push    edi
    21                              <1> 
    22                              <1>     ; get args
    23 0000017E 8B7508              <1>     mov     esi, [ebp + 8]      ; ESI = x(col)
    24 00000181 8B7D0C              <1>     mov     edi, [ebp + 12]     ; EDI = y(row)
    25                              <1> 
    26                              <1>     ; display all characters obtained by int 0x10 order
    27 00000184 B900000000          <1>     mov     ecx, 0
    28                              <1> .10L:
    29 00000189 81F900010000        <1>     cmp     ecx, 256                            ; while (ECX < 256) {
    30 0000018F 731F                <1>     jae     .10E 
    31                              <1> 
    32                              <1>     ; calc x(col)
    33 00000191 89C8                <1>     mov     eax, ecx                            ;   EAX = ECX;
    34 00000193 83E00F              <1>     and     eax, 0x0F                           ;   EAX &= 0x0F;
    35 00000196 01F0                <1>     add     eax, esi                            ;   EAX += x;
    36                              <1> 
    37 00000198 89CB                <1>     mov     ebx, ecx                            ;   EBX = ECX;
    38 0000019A C1EB04              <1>     shr     ebx, 4                              ;   EBX /= 16;
    39 0000019D 01FB                <1>     add     ebx, edi                            ;   EBX += y;
    40                              <1> 
    41 0000019F 516A075350E808FFFF- <1>     cdecl   draw_char, eax, ebx, 0x07, ecx      ;   draw_char();
    41 000001A8 FF6683C410          <1>
    42                              <1> 
    43 000001AD 41                  <1>     inc     ecx                                 ;   ECX++;
    44 000001AE EBD9                <1>     jmp     .10L                                ; }
    45                              <1> .10E:
    46                              <1> 
    47                              <1>     ; return registers' data
    48 000001B0 5A                  <1>     pop     edx
    49 000001B1 58                  <1>     pop     eax
    50                              <1> 
    51                              <1>     ; destroy stack frame
    52 000001B2 89EC                <1>     mov     esp, ebp
    53 000001B4 5D                  <1>     pop     ebp
    54                              <1> 
    55 000001B5 C3                  <1>     ret
    56                              <1> 
    34                                  
    35                                  ; --- padding ---
    36 000001B6 00<rept>                    times KERNEL_SIZE - ($ - $$) db 0x00
