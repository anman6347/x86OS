     1                                      ; --- macro ---
     2                                      %include    "../include/define.s"
     1                              <1> ; defines of important constants
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                       ; size of a sector
     4                              <1> 
     5                              <1> 
     6                              <1> BOOT_LOAD   equ     0x7c00                      ; addr where boot program loaded
     7                              <1> BOOT_SIZE   equ     (1024 * 8)                  ; size of boot code
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE)     ; number of sectors used in boot program
     9                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)     ; the end of boot code
    10                              <1> 
    11                              <1> E820_RECORD_SIZE    equ     20                  ; the record size (size of buffer for result) used in INT 0x15, EAX = 0xE820
    12                              <1> 
    13                              <1> 
    14                              <1> KERNEL_LOAD equ     0x0010_1000                 ; addr where the kernel loaded
    15                              <1> KERNEL_SIZE equ     (1024 * 8)                  ; size of the kernel
    16                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)   ; number of sectors used in kernel
     3                                      %include    "../include/macro.s"
     1                              <1> ; --- cdecl ---
     2                              <1> 
     3                              <1> %macro cdecl 1-*.nolist
     4                              <1>     %rep    %0 - 1
     5                              <1>         push    %{-1:-1}
     6                              <1>         %rotate -1
     7                              <1>     %endrep
     8                              <1>     %rotate -1
     9                              <1> 
    10                              <1>     call    %1
    11                              <1> 
    12                              <1>     %if 1 < %0          ; delete args
    13                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)      ; if realmode then __BITS__ = 16
    14                              <1>     %endif
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ; --- drive struct ---
    19                              <1> struc drive
    20 00000000 <res 00000002>      <1>     .no     resw    1       ; drive number
    21 00000002 <res 00000002>      <1>     .cyln   resw    1       ; cylinder
    22 00000004 <res 00000002>      <1>     .head   resw    1       ; head
    23 00000006 <res 00000002>      <1>     .sect   resw    1       ; sector
    24                              <1> endstruc
     4                                  
     5                                      ORG     KERNEL_LOAD
     6                                  
     7                                  [BITS 32]
     8                                  
     9                                      ; --- entry point ---
    10                                  kernel:
    11                                      ; get 8 * 16 BIOS font address (exsisted at the end of MBR)
    12 00000000 BE007E0000                  mov     esi, BOOT_LOAD + SECT_SIZE      ; ESI = 0x7c00 + 512
    13 00000005 0FB706                      movzx   eax, word [esi + 0]             ; segment for font addr (ESI + 0 not equals DS:ESI)
    14 00000008 0FB75E02                    movzx   ebx, word [esi + 2]             ; offset for font addr
    15 0000000C C1E004                      shl     eax , 4
    16 0000000F 01D8                        add     eax, ebx                        ; seg:off in real mode
    17 00000011 A3[90000000]                mov     [FONT_ADR], eax
    18                                  
    19                                      ; display characters
    20 00000016 6A41680F0100006A00-         cdecl	draw_char, 0, 0, 0x010F, 'A'
    20 0000001F 6A00E8F30000006683-
    20 00000028 C410               
    21 0000002A 6A42680F0100006A00-         cdecl	draw_char, 1, 0, 0x010F, 'B'
    21 00000033 6A01E8DF0000006683-
    21 0000003C C410               
    22 0000003E 6A43680F0100006A00-         cdecl	draw_char, 2, 0, 0x010F, 'C'
    22 00000047 6A02E8CB0000006683-
    22 00000050 C410               
    23                                  
    24 00000052 6A3068020400006A00-         cdecl	draw_char, 0, 0, 0x0402, '0'
    24 0000005B 6A00E8B70000006683-
    24 00000064 C410               
    25 00000066 6A3168120400006A00-         cdecl	draw_char, 1, 0, 0x0412, '1'
    25 0000006F 6A01E8A30000006683-
    25 00000078 C410               
    26 0000007A 6A5F68120400006A00-         cdecl	draw_char, 2, 0, 0x0412, '_'
    26 00000083 6A02E88F0000006683-
    26 0000008C C410               
    27                                  
    28                                  
    29                                      ; while(1)
    30 0000008E EBFE                        jmp     $
    31                                  
    32                                  
    33                                  ALIGN 4, db 0
    34 00000090 00000000                FONT_ADR:   dd  0
    35                                  
    36                                  ; --- modules ---
    37                                      %include    "../modules/protect/vga.s"
     1                              <1> ; definitions of
     2                              <1> ; void vga_set_read_plane(int32 plane);
     3                              <1> ; void vga_set_write_plane(int32 plane);
     4                              <1> ; void vram_font_copy(int32 font, int32 vram, int32 plane, int32 color)
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> ; --------------------------------------
     9                              <1> ; void vga_set_read_plane(int32 plane);
    10                              <1> ; plane : read-plane, uses only the low order 8 bits
    11                              <1> ; plane = |Reserved(0) * 6 | MAP * 2|
    12                              <1> ; MAP = 0 ~ 3 (Intensity = 3, R = 2, G = 1, B = 0)
    13                              <1> 
    14                              <1> vga_set_read_plane:
    15                              <1>     ; build stack frame
    16 00000094 55                  <1>     push    ebp
    17 00000095 89E5                <1>     mov     ebp, esp
    18                              <1> 
    19                              <1>     ; save registers' data
    20 00000097 50                  <1>     push    eax
    21 00000098 52                  <1>     push    edx
    22                              <1> 
    23                              <1>     ; select read-plane
    24 00000099 8A6508              <1>     mov     ah, [ebp + 8]       ; AH = read-plane
    25 0000009C 80E403              <1>     and     ah, 0x03
    26 0000009F B004                <1>     mov     al, 0x04            ; index of GR04(Read Plane Select Register)
    27 000000A1 66BACE03            <1>     mov     dx, 0x03CE          ; I/O (or memory) address of GRX(Graphics Controller Index Register)
    28 000000A5 66EF                <1>     out     dx, ax
    29                              <1> 
    30                              <1>     ; return registers' data
    31 000000A7 5A                  <1>     pop     edx
    32 000000A8 58                  <1>     pop     eax
    33                              <1> 
    34                              <1>     ; destroy stack frame
    35 000000A9 89EC                <1>     mov     esp, ebp
    36 000000AB 5D                  <1>     pop     ebp
    37                              <1> 
    38 000000AC C3                  <1>     ret
    39                              <1> 
    40                              <1> 
    41                              <1> ; --------------------------------------
    42                              <1> ; void vga_set_read_plane(int32 plane);
    43                              <1> ; plane : write-plane, uses only the low order 8 bits
    44                              <1> ; plane = |Reserved(0) * 4 |I|R|G|B|
    45                              <1> 
    46                              <1> vga_set_write_plane:
    47                              <1>     ; build stack frame
    48 000000AD 55                  <1>     push    ebp
    49 000000AE 89E5                <1>     mov     ebp, esp
    50                              <1> 
    51                              <1>     ; save registers' data
    52 000000B0 50                  <1>     push    eax
    53 000000B1 52                  <1>     push    edx
    54                              <1> 
    55                              <1>     ; select read-plane
    56 000000B2 8A6508              <1>     mov     ah, [ebp + 8]       ; AH = read-plane(Reserved(0) * 4|luminance|R|G|B)
    57 000000B5 80E40F              <1>     and     ah, 0x0F
    58 000000B8 B002                <1>     mov     al, 0x02            ; index of SR02(Plane/Map Mask )
    59 000000BA 66BAC403            <1>     mov     dx, 0x03C4          ; I/O (or memory) address of SRX(Sequencer Index)
    60 000000BE 66EF                <1>     out     dx, ax
    61                              <1> 
    62                              <1>     ; return registers' data
    63 000000C0 5A                  <1>     pop     edx
    64 000000C1 58                  <1>     pop     eax
    65                              <1> 
    66                              <1>     ; destroy stack frame
    67 000000C2 89EC                <1>     mov     esp, ebp
    68 000000C4 5D                  <1>     pop     ebp
    69                              <1> 
    70 000000C5 C3                  <1>     ret
    71                              <1> 
    72                              <1> 
    73                              <1> ; --------------------------------------
    74                              <1> ; void vram_font_copy(int32 font, int32 vram, int32 plane, int32 color)
    75                              <1> ; write font data to selected plane
    76                              <1> ;
    77                              <1> ; font : font addr of a character
    78                              <1> ; vram : vram addr where the character will be wrote
    79                              <1> ; plane : write-plane, uses only the low order 8 bits
    80                              <1> ; color : color of character on screen. this uses only the low order 16 bits
    81                              <1> ; color = |Reserved(0) * 4|back I|back R|back G|back B|Reserved(0) * 3|Transmission flag for front character|front I|front R|front G|front B|
    82                              <1> 
    83                              <1> vram_font_copy:
    84                              <1>     ; build stack frame
    85 000000C6 55                  <1>     push    ebp
    86 000000C7 89E5                <1>     mov     ebp, esp
    87                              <1> 
    88                              <1>     ; save registers' data
    89 000000C9 50                  <1>     push    eax
    90 000000CA 53                  <1>     push    ebx
    91 000000CB 51                  <1>     push    ecx
    92 000000CC 52                  <1>     push    edx
    93 000000CD 56                  <1>     push    esi
    94 000000CE 57                  <1>     push    edi
    95                              <1> 
    96                              <1>     ; get each args
    97 000000CF 8B7508              <1>     mov     esi, [ebp + 8]          ; ESI = font addr
    98 000000D2 8B7D0C              <1>     mov     edi, [ebp + 12]         ; EDI = vram addr
    99 000000D5 0FB64510            <1>     movzx   eax, byte [ebp + 16]    ; EAX = plane
   100 000000D9 0FB75D14            <1>     movzx   ebx, word [ebp + 20]    ; EBX = color
   101                              <1> 
   102                              <1>     ; dh = bool of write or not write back image
   103 000000DD 84C7                <1>     test    bh, al                  ; ZF = back color & write-plane
   104 000000DF 0F94C6              <1>     setz    dh                      ; AH = (ZF ? 1 : 0)
   105 000000E2 FECE                <1>     dec     dh                      ; DH = 0x00 or 0xFF
   106                              <1>     ; dl = bool of write or not write front image
   107 000000E4 84C3                <1>     test    bl, al                  ; ZF = front color & write-plane
   108 000000E6 0F94C2              <1>     setz    dl                      ; AL = (ZF ? 1 : 0)
   109 000000E9 FECA                <1>     dec     dl                      ; DL = 0x00 or 0xFF
   110                              <1> 
   111                              <1>     ; copy 16bit font data
   112 000000EB FC                  <1>     cld
   113 000000EC B910000000          <1>     mov     ecx, 16
   114                              <1> .10L:                               ; do {
   115 000000F1 AC                  <1>     lodsb                           ;   AL = *(ESI++);
   116 000000F2 88C4                <1>     mov     ah, al
   117 000000F4 F6D4                <1>     not     ah                      ;   make inverted image;
   118                              <1> 
   119                              <1>     ; front
   120 000000F6 20D0                <1>     and     al, dl                  ;   if (DL) write front image;
   121                              <1> 
   122                              <1>     ; back
   123 000000F8 F7C310000000        <1>     test    ebx, 0x0010             ;   if (Transmission) {
   124 000000FE 7404                <1>     jz      .11F
   125 00000100 2227                <1>     and     ah, [edi]               ;       AH = !image & State before rewriting   
   126 00000102 EB02                <1> 	jmp     .11E                    ;   } else {    
   127                              <1> .11F:
   128 00000104 20F4                <1>     and     ah, dh                  ;       AH = !image & specified background color
   129                              <1>                                     ;   }
   130                              <1> .11E:
   131 00000106 08E0                <1>     or      al, ah                  ; AL = front | back
   132                              <1> 
   133                              <1> 
   134 00000108 8807                <1>     mov     [edi], al               ; write character or background to VRAM
   135                              <1> 
   136 0000010A 83C750              <1>     add     edi, 80                 ; go to next line
   137 0000010D E2E2                <1>     loop    .10L                    ; } while (--ECX)
   138                              <1> 
   139                              <1> 
   140                              <1>     ; return registers' data
   141 0000010F 5F                  <1>     pop		edi
   142 00000110 5E                  <1>     pop		esi
   143 00000111 5A                  <1>     pop		edx
   144 00000112 59                  <1>     pop		ecx
   145 00000113 5B                  <1>     pop		ebx
   146 00000114 58                  <1>     pop		eax
   147                              <1> 
   148                              <1>     ; destroy stack frame
   149 00000115 89EC                <1>     mov     esp, ebp
   150 00000117 5D                  <1>     pop     ebp
   151                              <1> 
   152 00000118 C3                  <1>     ret
    38                                      %include    "../modules/protect/draw_char.s"
     1                              <1> ; void draw_char(int32 col, int32 row, int32 color, int32 ch);
     2                              <1> 
     3                              <1> ; display one specified character at the specified location
     4                              <1> 
     5                              <1> 
     6                              <1> ; col: column where the character is displayed. this parm must take a value between 0 and 79.
     7                              <1> ; row: row where the character is displayed. this parm must take a value between 0 and 29.
     8                              <1> ; col and row is not XY dot of screen
     9                              <1> 
    10                              <1> ; color : color of the character. this uses only the low order 16 bits
    11                              <1> ; color = color = |Reserved(0) * 4|back I|back R|back G|back B|Reserved(0) * 3|Transmission flag for front character|front I|front R|front G|front B|
    12                              <1> ; ch: ASCII character code
    13                              <1> 
    14                              <1> draw_char:
    15                              <1>     ; build stack frame
    16 00000119 55                  <1>     push    ebp
    17 0000011A 89E5                <1>     mov     ebp, esp
    18                              <1> 
    19                              <1>     ; save registers' data
    20 0000011C 50                  <1>     push    eax
    21 0000011D 53                  <1>     push    ebx
    22 0000011E 51                  <1>     push    ecx
    23 0000011F 52                  <1>     push    edx
    24 00000120 56                  <1>     push    esi
    25 00000121 57                  <1>     push    edi
    26                              <1> 
    27                              <1> 
    28                              <1>     ; get font address
    29 00000122 0FB67514            <1>     movzx   esi, byte [ebp + 20]
    30 00000126 C1E604              <1>     shl     esi, 4                      ; ESI *= 16, size of character = 16byte
    31 00000129 0335[90000000]      <1>     add     esi, [FONT_ADR]
    32                              <1> 
    33                              <1> 
    34                              <1>     ; get vram address where the character will be wrote
    35                              <1>     ; 0xA0000 + (640 / 8) * 16 * y + x, x = col, y = row
    36 0000012F 8B7D0C              <1>     mov     edi, [ebp + 12]                 ; EDI = y(row) 
    37 00000132 C1E708              <1>     shl     edi, 8                          ; 80 * 16 = 256 * 5 = 256 * 4 + 256
    38 00000135 8DBCBF00000A00      <1>     lea     edi, [0xA0000 + edi * 4 + edi]
    39 0000013C 037D08              <1>     add     edi, [ebp + 8]                  ; EDI += x(col)
    40                              <1> 
    41                              <1> 
    42                              <1>     ; display 1 character
    43 0000013F 0FB75D10            <1>     movzx   ebx, word[ebp + 16]             ; EBX = color
    44                              <1>     ; Intensity
    45 00000143 6A03E84AFFFFFF6683- <1>     cdecl   vga_set_read_plane, 0x03        
    45 0000014C C404                <1>
    46 0000014E 6A08E858FFFFFF6683- <1>     cdecl   vga_set_write_plane, 0x08
    46 00000157 C404                <1>
    47 00000159 536A085756E863FFFF- <1>     cdecl   vram_font_copy, esi, edi, 0x08, ebx
    47 00000162 FF6683C410          <1>
    48                              <1>     ; Red
    49 00000167 6A02E826FFFFFF6683- <1>     cdecl	vga_set_read_plane, 0x02
    49 00000170 C404                <1>
    50 00000172 6A04E834FFFFFF6683- <1>     cdecl	vga_set_write_plane, 0x04
    50 0000017B C404                <1>
    51 0000017D 536A045756E83FFFFF- <1>     cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 00000186 FF6683C410          <1>
    52                              <1>     ; Green
    53 0000018B 6A01E802FFFFFF6683- <1>     cdecl	vga_set_read_plane, 0x01
    53 00000194 C404                <1>
    54 00000196 6A02E810FFFFFF6683- <1>     cdecl	vga_set_write_plane, 0x02
    54 0000019F C404                <1>
    55 000001A1 536A025756E81BFFFF- <1>     cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 000001AA FF6683C410          <1>
    56                              <1>     ; Blue
    57 000001AF 6A00E8DEFEFFFF6683- <1>     cdecl	vga_set_read_plane, 0x00
    57 000001B8 C404                <1>
    58 000001BA 6A01E8ECFEFFFF6683- <1>     cdecl	vga_set_write_plane, 0x01
    58 000001C3 C404                <1>
    59 000001C5 536A015756E8F7FEFF- <1>     cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 000001CE FF6683C410          <1>
    60                              <1> 
    61                              <1> 
    62                              <1>     ; return registers' data
    63 000001D3 5F                  <1>     pop     edi
    64 000001D4 5E                  <1>     pop     esi
    65 000001D5 5A                  <1>     pop     edx
    66 000001D6 59                  <1>     pop     ecx
    67 000001D7 5B                  <1>     pop     ebx
    68 000001D8 58                  <1>     pop     eax
    69                              <1> 
    70                              <1> 
    71                              <1>     ; destroy stack frame
    72 000001D9 89EC                <1>     mov     esp, ebp
    73 000001DB 5D                  <1>     pop     ebp
    74                              <1> 
    75 000001DC C3                  <1>     ret
    39                                  
    40                                  ; --- padding ---
    41 000001DD 00<rept>                    times KERNEL_SIZE - ($ - $$) db 0x00
